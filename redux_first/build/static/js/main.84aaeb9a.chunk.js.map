{"version":3,"sources":["logo.svg","CounterComponent/CounterComponent.js","CounterComponent/Actions.js","CounterComponent/ActionTypes.js","App.js","serviceWorker.js","Store.js","CounterComponent/reducer.js","index.js"],"names":["module","exports","__webpack_require__","p","buttonStyle","margin","CounterComponent","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","onClickIncrementButton","bind","assertThisInitialized","onIncrement","react_default","a","createElement","style","onClick","count","Component","connect","state","dispatch","type","counter","App","src_CounterComponent_CounterComponent","Boolean","window","location","hostname","match","createStore","arguments","length","undefined","action","ReactDOM","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2MCIlCC,EAAc,CAClBC,OAAQ,QAIJC,cAEJ,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAC1BG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,IACbQ,QAAQC,IAAIV,GACZE,EAAKS,uBAAyBT,EAAKS,uBAAuBC,KAA5BT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAHJA,wFAQ3BO,QAAQC,IAAI,YACZL,KAAKL,MAAMc,YAAY,oCAKtB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,MAAOrB,EAAasB,QAASd,KAAKM,wBAA1C,KACAI,EAAAC,EAAAC,cAAA,6BAAWZ,KAAKL,MAAMoB,eAnBCC,aAuChBC,cAdS,SAACC,GACvB,MAAO,CACLH,MAAOG,IAIgB,SAACC,GAC1B,MAAO,CACLV,YAAa,SAACM,GACZI,ECxCiC,CAEnCC,KCLqB,YDMrBC,QDqCqBN,OAKVE,CAA6CvB,GGnC7C4B,mLANX,OACEZ,EAAAC,EAAAC,cAACW,EAAD,aAHYP,aCOEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECbSC,cCHA,WAAsB,IAArBX,EAAqBY,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,EAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnC,OAAOC,EAAOb,MACZ,IJJqB,YIKnB,OAAOF,EAAQe,EAAOZ,QAExB,QACE,OAAOH,KCCbgB,IAASC,OACLzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAUC,MAAOA,GACb3B,EAAAC,EAAAC,cAAC0B,EAAD,OAEFC,SAASC,eAAe,SHoHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.84aaeb9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, PropTypes } from 'react';\nimport {connect} from 'react-redux';\nimport {increment} from \"./Actions\"\n\nconst buttonStyle = {\n  margin: '10px'\n};\n\n\nclass CounterComponent extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n    console.log(props)\n    this.onClickIncrementButton = this.onClickIncrementButton.bind(this);\n  }\n\n  onClickIncrementButton() {\n   // Actions.increment(\"counter\");\n   console.log(\"click me\")\n   this.props.onIncrement(1);\n  }\n\n  render() {\n\n    return (\n      <div>\n        <button style={buttonStyle} onClick={this.onClickIncrementButton}>+</button>\n        <span>总数: {this.props.count}</span>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    count: state\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onIncrement: (count) => {\n      dispatch(increment(count));\n    }\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CounterComponent);\n","// 导入动作类型\nimport * as ActionTypes from './ActionTypes.js';\n\nexport const increment = (counter) => ({\n  // 分发动作，每个动作必须有一个type，可以有或者没有值\n    type: ActionTypes.INCREMENT,\n    counter: counter\n});\n","export const INCREMENT = 'increment';\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {view as View} from \"./CounterComponent\"\n\nclass App extends Component {\n  render() {\n    return (\n      <View/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from 'redux';\n\nimport {reducer as counterReducer} from './CounterComponent';\n\n\nexport default createStore(counterReducer);\n","import {INCREMENT} from './ActionTypes';\n\nexport default (state=0 , action) => {\n  switch(action.type) {\n    case INCREMENT: {\n      return state + action.counter;\n    }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from \"./Store\"\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}